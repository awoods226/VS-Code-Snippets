{
	/*
	 // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"classConstructor": {
		"prefix": "tscon",
		"body": [
			"constructor() {",
			"    super();",
			"}"
		],
		"description": "Adds a default constructor with no parameters"
	},
	"classConstructorWithParam": {
		"prefix": "tsconp",
		"body": "constructor(public ${param: name}: ${dataType: type}) {\n\tsuper();$0\n}",
		"description": "Adds a default constructor for the class that contains props as arguments"
	},
	"reduxAction": {
		"prefix": "rda",
		"body": [
			"export type ${NAME} = '${NAME}';",
			"export const ${NAME}: ${NAME} = '${NAME}';"
		],
		"description": "Create a strongly typed redux action"
	},
	"reduxActionCreatorWithParam": {
		"prefix": "rdacp",
		"body": [
			"${creatorName}: (${paramName}: number): ActionCreator => (dispatch, getState) => {",
			"    dispatch(new ${actionName}(${paramName}));",
			"}"
		],
		"description": "Adds a redux action creator with a single parameter"
	},
	"reduxActionCreator": {
		"prefix": "rdac",
		"body": [
			"${creatorName}: (): ActionCreator => (dispatch, getState) => {",
			"    dispatch(new ${actionName}());",
			"}"
		],
		"description": "Adds a redux action creator with no params"
	},
	"reduxReducerAction": {
		"prefix": "rdra",
		"body": [
			"if (isActionType(action, ${actionName})) {",
			"    return Object.assign({}, state, {$2});",
			"}"
		],
		"description": "Adds a Redux reducer action"
	}
}