{
/*
	 // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
"classConstructor": {
    "prefix": "tscon",
    "body": "constructor(public ${param: name}: ${dataType: type}) {\n\tsuper();\n\t$0\n}\n",
    "description": "Adds a default construcotr for the class that contains props as arguments"
  },
  "reduxActionCreatorWithParam": {
	  "prefix": "rdacp",
	  "body": [
		  "${creatorName}: (${paramName}: number): ActionCreator => (dispatch, getState) => \\{",
		  "    dispatch(new ${actionName}(${paramName}));",
		  "}"
	  ],
	  "description": "Adds a redux action creator with a single parameter"
  },
  "reduxActionCreator": {
	  "prefix": "rdac",
	  "body": [
		  "${creatorName}: (): ActionCreator => (dispatch, getState) => \\{",
		  "    dispatch(new ${actionName}());",
		  "}"
	  ],
	  "description": "Adds a redux action creator with no params"
  },
  "reduxReducerAction": {
	  "prefix": "rdra",
	  "body": [
		  "if (isActionType(action, ${actionName})) \\{",
		  "    return Object.assign({}, state, {$2});",
		  "}"
	  ],
	  "description": "Adds a Redux reducer action"
  }
}
