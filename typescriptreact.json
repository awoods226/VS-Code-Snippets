{
  "Typescript react component": {
    "prefix": "tsrc",
    "body": [
      "import * as React from \"react\";",
      "",
      "interface ${name:ComponentName}Props {};",
      "",
      "interface ${name:ComponentName}State {};",
      "",
      "class ${name:ComponentName} extends React.Component<${name:ComponentName}Props, ${name:ComponentName}State> {",
      "\tpublic render(): JSX.Element {",
      "\t\treturn (<div>Body</div>);",
      "\t}",
      "}",
      "",
      "export default ${name:ComponentName};",
      ""
    ]
  },
  "reactJustClassCompoment": {
    "prefix": "rcjc",
    "body": "class ${1:componentName} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t);\n\t}\n}\n",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactStateless": {
    "prefix": "rsc",
    "body": "import * as React from 'react';\n\nconst ${1:componentName} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\nexport default ${1:componentName};",
    "description": "Creates a stateless React component without PropTypes in ES6 nodule system"
  },
  "reactStatelessProps": {
    "prefix": "rscp",
    "body": [
      "import * as React from 'react';",
      "",
      "interface ${1:ComponentName}Props {};",
      "",
      "const ${1:ComponentName} = (props: ${1:ComponentName}Props) => {",
      "    return (",
      "        <div></div>",
      "    );",
      "};",
      "export default ${1:ComponentName}"
    ],
    "description": "Creates a stateless react component with props"
  },
  "componentTest": {
    "prefix": "rsct",
    "body": [
      "import { expect } from 'chai';",
      "import { shallowWithContext } from '../../testutils';",
      "import * as React from 'react';",
      "",
      "import { ${componentName} } from \"./\";",
      "",
      "describe(\"${componentName}\", () => {",
      "    it('renders', () => {",
      "        const wrapper = shallowWithContext(<${componentName}/>);",
      "        expect(wrapper.length).to.eql(1);",
      "    });",
      "});"
    ],
    "description": "Create a unit test for a react component"
  },
  "classConstructor": {
    "prefix": "tscon",
    "body": "constructor(props) {\n\tsuper(props);\n\t$0\n}\n",
    "description": "Adds a default construcotr for the class that contains props as arguments"
  },
  "classConstructorContext": {
    "prefix": "conc",
    "body": "constructor(props, context) {\n\tsuper(props, context);\n\t$0\n}\n",
    "description": "Adds a default construcotr for the class that contains props and context as arguments"
  },
  "emptyState": {
    "prefix": "est",
    "body": "this.state = {\n\t$1\n};",
    "description": "Creates empty state object. To be used in a constructor."
  },
  "componentWillMount": {
    "prefix": "cwm",
    "body": "\ncomponentWillMount() {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received."
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "componentWillUnmount() {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "componentRender": {
    "prefix": "ren",
    "body": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n}",
    "description": "When called, it should examine this.props and this.state and return a single child element."
  },
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0);",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }});\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentProps": {
    "prefix": "props",
    "body": "this.props.$0",
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": "this.state.$0",
    "description": "Access component's state"
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.$1 = this.$1.bind(this);$0",
    "description": "Access component's state"
  }
}
